// Code generated by sqlc. DO NOT EDIT.
// source: prelimtac.sql

package db

import (
	"context"
)

const createPrelimTac = `-- name: CreatePrelimTac :one
INSERT INTO  prelim_tac_master (
  team_id,
  token,
  orders,
  paket,
  score
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, team_id, token, orders, paket, score, last_page, submited, benar, salah, kosong
`

type CreatePrelimTacParams struct {
	TeamID int32  `json:"team_id"`
	Token  string `json:"token"`
	Orders string `json:"orders"`
	Paket  int32  `json:"paket"`
	Score  int32  `json:"score"`
}

func (q *Queries) CreatePrelimTac(ctx context.Context, arg CreatePrelimTacParams) (PrelimTacMaster, error) {
	row := q.db.QueryRowContext(ctx, createPrelimTac,
		arg.TeamID,
		arg.Token,
		arg.Orders,
		arg.Paket,
		arg.Score,
	)
	var i PrelimTacMaster
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.Token,
		&i.Orders,
		&i.Paket,
		&i.Score,
		&i.LastPage,
		&i.Submited,
		&i.Benar,
		&i.Salah,
		&i.Kosong,
	)
	return i, err
}

const createPrelimTacPgJawaban = `-- name: CreatePrelimTacPgJawaban :exec
INSERT INTO prelim_tac_pg_jawaban (
  team_id,
  soal_id,
  jawaban
) VALUES (
  $1, $2, $3
)
ON CONFLICT (team_id, soal_id)  DO UPDATE SET jawaban = EXCLUDED.jawaban
`

type CreatePrelimTacPgJawabanParams struct {
	TeamID  int32 `json:"team_id"`
	SoalID  int32 `json:"soal_id"`
	Jawaban int32 `json:"jawaban"`
}

func (q *Queries) CreatePrelimTacPgJawaban(ctx context.Context, arg CreatePrelimTacPgJawabanParams) error {
	_, err := q.db.ExecContext(ctx, createPrelimTacPgJawaban, arg.TeamID, arg.SoalID, arg.Jawaban)
	return err
}

const getPagePrelimTac = `-- name: GetPagePrelimTac :one
SELECT last_page FROM prelim_tac_master
WHERE team_id = $1
`

func (q *Queries) GetPagePrelimTac(ctx context.Context, teamID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPagePrelimTac, teamID)
	var last_page int32
	err := row.Scan(&last_page)
	return last_page, err
}

const getPrelimTacByTeamId = `-- name: GetPrelimTacByTeamId :one
SELECT id, team_id, token, orders, paket, score, last_page, submited, benar, salah, kosong from prelim_tac_master
WHERE team_id = $1
`

func (q *Queries) GetPrelimTacByTeamId(ctx context.Context, teamID int32) (PrelimTacMaster, error) {
	row := q.db.QueryRowContext(ctx, getPrelimTacByTeamId, teamID)
	var i PrelimTacMaster
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.Token,
		&i.Orders,
		&i.Paket,
		&i.Score,
		&i.LastPage,
		&i.Submited,
		&i.Benar,
		&i.Salah,
		&i.Kosong,
	)
	return i, err
}

const getPrelimTacPgById = `-- name: GetPrelimTacPgById :one
SELECT id, soal, pilihan1, pilihan2, pilihan3, pilihan4, jawaban, bobot, paket from prelim_tac_pg
WHERE id = $1
`

func (q *Queries) GetPrelimTacPgById(ctx context.Context, id int32) (PrelimTacPg, error) {
	row := q.db.QueryRowContext(ctx, getPrelimTacPgById, id)
	var i PrelimTacPg
	err := row.Scan(
		&i.ID,
		&i.Soal,
		&i.Pilihan1,
		&i.Pilihan2,
		&i.Pilihan3,
		&i.Pilihan4,
		&i.Jawaban,
		&i.Bobot,
		&i.Paket,
	)
	return i, err
}

const updatePagePrelimTac = `-- name: UpdatePagePrelimTac :exec
UPDATE prelim_tac_master
SET last_page = last_page + 1
WHERE team_id = $1
`

func (q *Queries) UpdatePagePrelimTac(ctx context.Context, teamID int32) error {
	_, err := q.db.ExecContext(ctx, updatePagePrelimTac, teamID)
	return err
}

const updateSubmitedPrelimTac = `-- name: UpdateSubmitedPrelimTac :exec
UPDATE prelim_tac_master
SET submited = now()
WHERE team_id = $1
`

func (q *Queries) UpdateSubmitedPrelimTac(ctx context.Context, teamID int32) error {
	_, err := q.db.ExecContext(ctx, updateSubmitedPrelimTac, teamID)
	return err
}
