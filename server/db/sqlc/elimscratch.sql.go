// Code generated by sqlc. DO NOT EDIT.
// source: elimscratch.sql

package db

import (
	"context"
)

const createscratchJawaban = `-- name: CreatescratchJawaban :exec
INSERT INTO scratch_the_hidden_words_jawaban (
  team_id,
  soal_id,
  jawaban
) VALUES (
  $1, $2, $3
)
ON CONFLICT (team_id, soal_id)  DO UPDATE SET jawaban = EXCLUDED.jawaban
`

type CreatescratchJawabanParams struct {
	TeamID  int32  `json:"team_id"`
	SoalID  int32  `json:"soal_id"`
	Jawaban string `json:"jawaban"`
}

func (q *Queries) CreatescratchJawaban(ctx context.Context, arg CreatescratchJawabanParams) error {
	_, err := q.db.ExecContext(ctx, createscratchJawaban, arg.TeamID, arg.SoalID, arg.Jawaban)
	return err
}

const createscratchMaster = `-- name: CreatescratchMaster :one
INSERT INTO  scratch_the_hidden_words_master (
  team_id,
  token
) VALUES (
  $1, $2
) RETURNING id, team_id, token, benar, salah, score, submited
`

type CreatescratchMasterParams struct {
	TeamID int32  `json:"team_id"`
	Token  string `json:"token"`
}

func (q *Queries) CreatescratchMaster(ctx context.Context, arg CreatescratchMasterParams) (ScratchTheHiddenWordsMaster, error) {
	row := q.db.QueryRowContext(ctx, createscratchMaster, arg.TeamID, arg.Token)
	var i ScratchTheHiddenWordsMaster
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.Token,
		&i.Benar,
		&i.Salah,
		&i.Score,
		&i.Submited,
	)
	return i, err
}

const getscratchByTeamId = `-- name: GetscratchByTeamId :one
SELECT id, team_id, token, benar, salah, score, submited from scratch_the_hidden_words_master
WHERE team_id = $1
`

func (q *Queries) GetscratchByTeamId(ctx context.Context, teamID int32) (ScratchTheHiddenWordsMaster, error) {
	row := q.db.QueryRowContext(ctx, getscratchByTeamId, teamID)
	var i ScratchTheHiddenWordsMaster
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.Token,
		&i.Benar,
		&i.Salah,
		&i.Score,
		&i.Submited,
	)
	return i, err
}

const getscratchSoal = `-- name: GetscratchSoal :many
select id, jawaban, benar from elim_unac_scratch_the_hidden_words
order by id
`

func (q *Queries) GetscratchSoal(ctx context.Context) ([]ElimUnacScratchTheHiddenWord, error) {
	rows, err := q.db.QueryContext(ctx, getscratchSoal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ElimUnacScratchTheHiddenWord
	for rows.Next() {
		var i ElimUnacScratchTheHiddenWord
		if err := rows.Scan(&i.ID, &i.Jawaban, &i.Benar); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubmitedscratch = `-- name: UpdateSubmitedscratch :exec
UPDATE scratch_the_hidden_words_master
SET submited = now()
WHERE team_id = $1
`

func (q *Queries) UpdateSubmitedscratch(ctx context.Context, teamID int32) error {
	_, err := q.db.ExecContext(ctx, updateSubmitedscratch, teamID)
	return err
}
