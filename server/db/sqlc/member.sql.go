// Code generated by sqlc. DO NOT EDIT.
// source: member.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMember = `-- name: CreateMember :one
INSERT INTO  member (
  full_name,
  birth_place,
  birth_date,
  nisn,
  team_id,
  member_number
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, full_name, birth_place, birth_date, nisn, team_id, member_number
`

type CreateMemberParams struct {
	FullName     string         `json:"full_name"`
	BirthPlace   string         `json:"birth_place"`
	BirthDate    time.Time      `json:"birth_date"`
	Nisn         sql.NullString `json:"nisn"`
	TeamID       int32          `json:"team_id"`
	MemberNumber int32          `json:"member_number"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.FullName,
		arg.BirthPlace,
		arg.BirthDate,
		arg.Nisn,
		arg.TeamID,
		arg.MemberNumber,
	)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthPlace,
		&i.BirthDate,
		&i.Nisn,
		&i.TeamID,
		&i.MemberNumber,
	)
	return i, err
}

const getMemberById = `-- name: GetMemberById :one
SELECT id, full_name, birth_place, birth_date, nisn, team_id, member_number FROM member
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMemberById(ctx context.Context, id int32) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMemberById, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthPlace,
		&i.BirthDate,
		&i.Nisn,
		&i.TeamID,
		&i.MemberNumber,
	)
	return i, err
}

const getMemberByTeamId = `-- name: GetMemberByTeamId :many
SELECT id, full_name, birth_place, birth_date, nisn, team_id, member_number FROM member
WHERE team_id = $1 LIMIT 1
`

func (q *Queries) GetMemberByTeamId(ctx context.Context, teamID int32) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, getMemberByTeamId, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.BirthPlace,
			&i.BirthDate,
			&i.Nisn,
			&i.TeamID,
			&i.MemberNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
